//კლავიატურის ჩაკეცვა
func touchesBegan(touches:Set<UITouch>, withEvent event:UIEvent?){
self.view.endEditing(true)
}

//შემთხვევითი რიცხვების გენერირება 
arc4random_uniform(UInt32 number)  

//Button -ის ტექსტის ცვლილება
button.setTitleColor("ფერი", forState:UIControlState.Normal)

//Button-ის კუთხის რადიუსი
button.layer.cornerRadius=button.frame.width*0.05

//სემენტის ინდექსი, აბრუნებს Int-ს რომელიც არის მონიშნული
sender.SelectedSegmentIndex

//alert-ის შექმნა, hendler ში nil ის მაგივრად უნდა გადავაწოდოთ ფუნქცია ანუ რაც გვინდა რო მოხდეს დაჭერის შემდეგ
func createalert(){
   let alert = UIAalertController(title: "Title", message: "message", preferredStyle: UIAlertControllerStyle.alert)
   alert.addAction(UIAalertController(title: "Title", style:UIAlertActionStyle.Default, handler: nil))
    alert.addAction(UIAalertController(title: "Cansel", style:UIAlertActionStyle.Cansel, handler: nil))
    presentViewController(alert, animated: true, completion: nil)
}

//ტაგირება და view-ების ჩაშლა--view-ში არსებულ ღილაკებს უცვლის ფერს
for item in view.subviews where item is UIButton{
item.backgroundColor=UIColor.purpleColor()
}

//TableView-ს აქვს პროტოკოლები რომლებიც უნდა ჩავუწეროთ კლასში
UITableViewDataSource (აქვს ფუნქციები რომლებიც აუცილებლად უნდა გადავფაროთ) , UITableViewDelegate

//TableView-ში სექციების რაოდენობა. return ში ჩავწერთ რაოდენობას
func numberOfSectionsInTableView(tavleView: UITableView) -> Int{
   return 1
}

//TableView-ში Row ების რაოდენობა
func tableView(tableView: UITavleView, numberOfRowsInSection section: Int) -> Int {
   return 10
}

//TableView-ში cell-ის შექმნა. ანუ სექციაში რაც გვინდა რო გამოვიძახოთ. ამ შემთხვევაში დაიბეჭდება ragaca
func tableView(tableView: UITavleView, CellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{
let cell = UITableViewCell()
cell.textLabel?.text = "ragaca"
return cell
}

//row-ს ინდექსი
indexPath.row

//იდენთიფიკატორით cell-ის დაბრუნება.. პარამეტრად რაც გადაეწოდება cell არის identifier-ში რასაც ჩავწერთ. 
let cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath) as! CastomTableViewCell

//კოდიდან სურათის მინიჭება
imageName.image = UIImage(named: "suratis saxeli")

//row-ზე დაკლიკების დაჭერა
func tableView(tableView: UITavleView, didSelectRowAtIndexPath indexPath:NSIndexPath){
print(indexPath.row) //ტანში ჩავწერთ რაც გვინდა რომ დაჭერის შემდეგ მოხდეს, ამ შემთხვევაში ინდექსს ბეჭდავს
}

//row-ს delete ანიმაციით
func tableView(tableView: UITavleView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath: NSIndexPass){
if editingStyle == UITableViewCellEditingStyle.Delete{
model.removeAtIndex(indexPath.row)
tableView.reloadData()
model.removeAtIndex(index.Path.row)
tableView.deleteRowsAtIndexPass([indexPass], withRowAnimation: UITableViewRowAnimation.Fade)
   }
}

//cell-ზე დაჭერით ახალ ფანჯარაზე გადასვლა, P.S. უნდა ჩავწეროთ row-ზე დაკლიკების ფუნქციაში
performSegueWithIdentifer("segue", sender: self)



//ფუნქცია რომელიც ამზადებს segues სანამ ის გაეშვება 
func prepareForSegue(segue: UIStorboardSegue, sender: AnyObject?) {
let c = segue.destinationViewController as! აქ შენი კლასის ტიპი

c.label.text="ddsdsd"
}

//Back - ისე რომ დაიხუროს გვერდი 
self.navigationController?.popViewControllerAnimated(true)

// textfild - ში ჩადგომისას კლავიატურა რომ არ ამოვიდეს
func textFieldShouldBeginEditing(textField: UITextField) -> Bool {
        return false
    }


//ფერების hex კოდიდან rgb-ში გადასაყვანი საიტი. p.s. 255-ზე უნდა გავყოთ მერე.
http://www.webpagefx.com/web-design/hex-to-rgb/


//ნოტიფიკაციებისთვის საჭირო კოდი AppDelegate-ში, იმისთვის რომ ნებართვა აიღოს USer-გან
func application (application: UIApplication, didFinishLaunchingWhitOption..........................)
{

application.registerUserNotificationSettings(UIUserNotificationSettings(forTypes: UIUserNotificationType.ALert | UIUserNotificationType.Badge
| UIUserNotificationType.Sound, categories:nil))


}


//ნოტიფიკაციებს ფუნქციის ტანი 

func Notification()
{
var Notification = UILocalNotification()
Notification.alertAction = "Go Back to App"
Notification.alertBody = NSDate(timeIntervalSinceNow:0)

UIApplication.sharedApplication().scheduleLocalNotification(Notification)

}

//როდესაც ორჯერ ხდება სწრაფად ერთი და იგივე segue მაშინ ღილაკზეცაა მიბმული და კოდიდანაც. !!!!!!!!!!!!!!!!!

//მიმდინარე დროის დასაბრუნებელი ფუქნცია  swift 2.0
func getCurrentLocalDate()-> NSDate {
    var now = NSDate()
    let nowComponents = NSDateComponents()
    let calendar = NSCalendar.currentCalendar()
    nowComponents.year = NSCalendar.currentCalendar().component(NSCalendarUnit.Year, fromDate: now)
    nowComponents.month = NSCalendar.currentCalendar().component(NSCalendarUnit.Month, fromDate: now)
    nowComponents.day = NSCalendar.currentCalendar().component(NSCalendarUnit.Day, fromDate: now)
    nowComponents.hour = NSCalendar.currentCalendar().component(NSCalendarUnit.Hour, fromDate: now)
    nowComponents.minute = NSCalendar.currentCalendar().component(NSCalendarUnit.Minute, fromDate: now)
    nowComponents.second = NSCalendar.currentCalendar().component(NSCalendarUnit.Second, fromDate: now)
    nowComponents.timeZone = NSTimeZone(abbreviation: "GMT")
    now = calendar.dateFromComponents(nowComponents)!
    return now
}
// swift 3.0

func getCurrentLocalDate()-> Date {
    var now = Date()
    var nowComponents = DateComponents()
    let calendar = Calendar.current
    nowComponents.year = Calendar.current.component(.year, from: now)
    nowComponents.month = Calendar.current.component(.month, from: now)
    nowComponents.day = Calendar.current.component(.day, from: now)
    nowComponents.hour = Calendar.current.component(.hour, from: now)
    nowComponents.minute = Calendar.current.component(.minute, from: now)
    nowComponents.second = Calendar.current.component(.second, from: now)
    nowComponents.timeZone = TimeZone(abbreviation: "GMT")!
    now = calendar.date(from: nowComponents)!
    return now as Date
}
